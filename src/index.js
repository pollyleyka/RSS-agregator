import './style.scss';
import 'bootstrap';
import app from './app.js';

app();

//  Будет полезно сразу добавить в проект инструкцию по запуску и требования,
// добавить скрипты в package.json (build и start для разработки)
// + babel нам не требуется - его можно сразу убрать.
// У меня в дев сборке не подключились стили... но возможно, что я собрал
// что-то не так. Поэтому, инструкция очень важна, чтобы это делать быстрее и без проб.

// fetch(`https://allorigins.hexlet.app/get?url=${encodeURIComponent('https://wikipedia.org')}`)
//   .then(response => {
//     if (response.ok) return response.json()
//     throw new Error('Network response was not ok.')
//   })
//   .then(data => console.log(data.contents));

// const proxy = new Proxy(target, handler);

// const student = {
//   name: 'Roman',
//   age: 23,
//   program: 'js-frontend',
// };

// const rewrite = new Proxy(student, {
//   set: (target, prop, value) => {
// если свойство есть в объекте, proxy позволяет нам его переписать
//     if (prop in target) {
//       target[prop] = value;
// при успешной записи, метод set() должен вернуть true
//       return true;
//     } else {
// если свойства нет в объекте, то выбросится ошибка, либо можем вернуть false
//       throw new Error(`Cannot rewrite non-existed property '${prop}'`);
//     }
//   },
// });

// Надо пропустить свою ссылку, куда будешь делать запрос, через allOrigins

// Допустим, тебе надо сделать запрос на http://site.com
// Вместо этого делаешь через
// https://allorigins.hexlet.app/get?disableCache=true&url=http://site.com
// В параметрах видно что отключён кэш, чтобы всегда получать свежие данные
// В ответ получишь объект со статусом и полученным контентом - попробуй в консоль вывести,
// всё станет ясно)

// (.then((response) => ...)) Внутри тебе нужно данные разпарсить(см.подсказку в уроке),обработать,
// построив структуру(вспоминаем деревья)
// и уже потом добавить в стейт через вотчера, чтобы он поймал изменения и уже "отдал приказ"
// функциям отрисовки.
// Отрисовка, тут все просто.
// Пишешь функцию, где создаешь DOM элементы и наполняешь их из полученных данных.
// Какие атрибуты должны быть для бутстрапа можешь посмотреть( и копирнуть себе)
// в примере-образце. А ошибки обрабатываешь уже внутри catch

// нужно делать запрос по переданной ссылке и получать данные.
// да, все верно. И как Сергей подсказывает, необходимо воспользоваться "прокси".
// Реализуем при помощи axios - примеры были в упражнениях.
// Эти данные нужно обработать и добавить в стейст, разбить по разделам стейта
// Все верно. Полученные данные необходимо распарсить (парсер размещаем в отдельном модуле),

// написать рендеринг верстки постов и фидов, добавить логику запускающую этот рендеринг.
// Да, отлично - порядок рендера вам подскажет как оптимально хранить данные.
